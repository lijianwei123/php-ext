zend api学习笔记：
@see http://www.walu.cc/phpbook
@see http://www.kuqin.com/php5_doc/x184467.html


zval start:
php在内核中是通过zval结构体存储变量的 
定义在Zend/zend.h文件中
struct _zval_struct {
	zvalue_value value; /*变量的值*/
	zend_uint refcount__gc;
	zend_uchar type; /*变量当前的数据类型*/
	zend_uchar is_ref_gc;
};
typedef struct _zval_struct zval;

//在Zend/zend_types.h里定义的
typedef unsigned int zend_uint;
typedef unsigned char zend_uchar;


zvalue_value 类型是个union 定义在Zend/zend.h
typedef union _zvalue_value {
	long lval; /* long value */
	double dval;/*double value*/
	struct{
		char *val;
		int len;
	} str;
	HashTable *ht; /*hash table value*/
	zend_object_value obj;
} zvalue_value;

PHP内部定义的数据类型:
IS_NULL
IS_LONG
IS_DOUBLE
IS_BOOL
IS_ARRAY
IS_OBJECT
IS_STRING
IS_RESOURCE
IS_CONSTANT
IS_CONSTANT_ARRAY



php_printf()函数是内核对printf函数封装

变量类型

#define Z_TYPE(zval) (zval).type
#define Z_TYPE_P(zval_p)  Z_TYPE(* zval_p)
#define Z_TYPE_PP(zval pp) Z_TYPE(** zval_pp)

变量值操作的宏都定义在 Zend/zend_operators.h

#define Z_LVAL(zval)  (zval).value.lval
#define Z_LVAL_P(zval_p)  Z_LVAL(*zval_p)
#define Z_LVAL_PP(zval_pp)  Z_LVAL(**zval_pp)

#define Z_BAL(zval)  ((zend_bool)(zval).value.lval)

#define Z_DVAL(zval)  (zval).value.dval

#define Z_STRVAL(zval)  (zval).value.str.val

#define Z_STRLEN(zval)  (zval).value.str.len

#define Z_ARRVAL(zval) (zval).value.ht

#define Z_OBJVAL(zval)  (zval).value.obj

#define Z_RESVAL(zval)  (zval).value.lval


PHPWRITE(Z_STRVAL_P(zstr), Z_STRLEN_P(zstr));


zval end:


创建PHP变量
MAKE_STD_ZVAL  ALLOC_INIT_ZVAL

ZVAL_NULL(pvz)   
ZVAL_BOOL(pzv,b)
ZVAL_TRUE(pzv)
ZVAL_FALSE(pzv)
ZVAL_LONG(pzv, 1)
ZVAL_DOUBLE(pzv, d)
ZVAL_STRINGL(pzv, str, len, dup)
ZVAL_STRING(pzv, str, dup)
ZVAL_RESOURCE(pzv, res)


变量的存储方式
  Zend/zend_globals.h
  struct _zend_executor_globals {
	HashTable  symbol_table;  #可以通过EG宏访问 代表PHP的全局变量  如$GLOBALS
	HashTable  *active_symbol_table; #可以通过EG(active_symbol_table) 它代表的是处于当前作用域的变量符号表
  };


此段代码相当于
zval *fooval;
MAKE_STD_ZVAL(fooval);
ZVAL_STRING(fooval, "bar", 1);
ZEND_SET_SYMBOL(EG(active_symbol_table), "foo", fooval);

$foo = 'bar';

变量的检索

zend_hash_find

zval ** fooval;
if(zend_hash_find(EG(active_symbol_table), "foo", sizeof("foo"), (void **)&fooval) == SUCCESS) {
	php_printf("成功发现$foo!");
} else {
	php_printf("没有发现$foo!");
}

类型转换
ZEND_API void convert_to_long(zval *op);
ZEND_API void convert_to_double(zval *op);
ZEND_API void convert_to_null(zval *op);
ZEND_API void convert_to_boolean(zval *op);
ZEND_API void convert_to_array(zval *op);
ZEND_API void convert_to_object(zval *op);
ZEND_API void _convert_to_string(zval *op ZEND_FILE_LINE_DC);

#define convert_to_string(op) if((op)->type != IS_STRING) { _convert_to_string((op) ZEND_FILE_LINE_CC);}

内存管理
void call_function(const char *fname, int fname_len TSRMLS_DC)
{
	zend_function *fe;
	char * lcase_fname;

	lcase_fname = estrndup(fname, fname_len);
	zend_str_tolower(lcase_fname, fname_len);

	if(zend_hash_find(EG(function_table), lcase_fname, fname_len + 1, (void **)&fe) == SUCCESS)
	{
		zend_execute(fe->op_array TSRMLS_CC);
	} else {
		php_error_docref(NULL TSRMLS_CC, E_ERROR, "call to undefined function: %s()", fname);
	}
	efree(lcase_fname);
}








